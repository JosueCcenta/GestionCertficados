PROCEDURES: 

ALUMNOS COMPLETADO
createAlumno(?,?,?,?) = ya esta
updateAlumno(?,?,?,?,?) = ya esta
getAlumnosFilter20(?) = ya esta
deleteAlumno(?) = ya esta
getAlumnos = ya esta
searchBarAlumno(?) = ya esta
getAlumnoById(?) = ya esta 

createContenidoSeminario(?) = YA ESTA
updateContenido(?,?) = YA ESTA
deleteContenido(?,?) = YA ESTA
getContenidoSeminarioById = YA ESTA
searchBarContenidoSeminario(?) = YA ESTA
getContenidoSeminarioFilter20 () = YA ESTA

createInstructor(?,?,?)  = ya esta
updateInstructor(?,?,?,?) = ya esta
deleteInstructor(?) = ya esta
getInstructorbYiD= ya esta 
getInstructores() = ya esta
searchBarInstructor(?) = ya esta

createCertificado(?,?) = ya esta
updateCertificado(?,?,?) = ya esta
getCertificadoById(?) = ya esta 

createSeminario(?,?,?,?,?,?) = ya esta
updateSeminario(?,?,?,?,?,?,?) = ya esta
getSeminarioById(?) = ya esta
deleteSeminario(?) = ya esta
searchBarSeminario() = ya esta
getSeminarioFilter20() = ya esta 6

createUsuario() = YA ESTA
updateUsuario () = YA ESTA
getUsuarioById () = YA ESTA
deleteUsuario () = YA ESTA
searchBarUsuario () = YA ESTA
getUsuariosFilter20 () = YA ESTA 6
---------------------------------------------------------
createTipo_usuario () = YA ESTA
updateTipo_usuario () = YA ESTA
getTipo_usuarioById () = YA ESTA
deleteTipo_usuario () = YA ESTA4


Actualizar usuario y alumno el campo de contraseña con encriptado hash = YA ESTA

Crear las rutas para acceder a los controladores =

alumno = ya esta
Certificado = ya esta
Contenido_Seminario = ya esta
Convert = ya esta
Instructor Controller = ya esta
Login Controller = FALTA 
Seminario Controller = ya esta
Tipo usuario = ya esta
usuario = falta


exports.updateTipo = [
    param("id_tipo_usuario").notEmpty().withMessage("El id no puede estar vacio").isInt({ min: 1 }).withMessage("Debe de ser un número entero y positivo"),
    body("nombre_tipo_usuario").notEmpty().withMessage("El nombre del tipo de usuario no puede estar vacio").isAlpha("es-ES").withMessage("Debe de ser una palabra"),
    (req, res) => {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ error: errors.array() });
        }

        const id_tipo_usuario = req.params.id_tipo_usuario;
        const nombre_tipo_usuario = req.body.nombre_tipo_usuario;

        const sql = `call updateTipo_usuario(?, ?)`;
        ConexionBd.query(sql, [id_tipo_usuario, nombre_tipo_usuario], (err) => {
            if (err) {
                return res.status(500).json({ error: err });
            }
            res.status(200).json({ result: "Se ha actualizado correctamente el tipo de usuario" });
        });
    }
];